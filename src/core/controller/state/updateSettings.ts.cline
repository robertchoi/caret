import { Controller } from ".."
import { Empty } from "../../../shared/proto/common"
import { UpdateSettingsRequest } from "../../../shared/proto/state"
import { updateApiConfiguration } from "../../storage/state"
import { buildApiHandler } from "../../../api"
import { convertProtoApiConfigurationToApiConfiguration } from "../../../shared/proto-conversions/state/settings-conversion"
import { convertProtoChatSettingsToChatSettings } from "../../../shared/proto-conversions/state/chat-settings-conversion"
import { TelemetrySetting } from "@/shared/TelemetrySetting"

/**
 * Updates multiple extension settings in a single request
 * @param controller The controller instance
 * @param request The request containing the settings to update
 * @returns An empty response
 */
export async function updateSettings(controller: Controller, request: UpdateSettingsRequest): Promise<Empty> {
	try {
		// CARET MODIFICATION: Debug logging to track what's being updated
		console.log("[DEBUG] üîß updateSettings called with:", {
			hasApiConfiguration: !!request.apiConfiguration,
			hasTelemetrySetting: !!request.telemetrySetting,
			hasChatSettings: !!request.chatSettings,
			hasUILanguage: request.uiLanguage !== undefined,
			uiLanguageValue: request.uiLanguage,
			otherSettings: {
				ChatbotAgentSeparateModelsSetting: request.ChatbotAgentSeparateModelsSetting !== undefined,
				enableCheckpointsSetting: request.enableCheckpointsSetting !== undefined,
				mcpMarketplaceEnabled: request.mcpMarketplaceEnabled !== undefined,
				mcpResponsesCollapsed: request.mcpResponsesCollapsed !== undefined,
				mcpRichDisplayEnabled: request.mcpRichDisplayEnabled !== undefined,
				shellIntegrationTimeout: request.shellIntegrationTimeout !== undefined,
				terminalReuseEnabled: request.terminalReuseEnabled !== undefined,
				terminalOutputLineLimit: request.terminalOutputLineLimit !== undefined,
			},
		})
		// Update API configuration
		if (request.apiConfiguration) {
			const apiConfiguration = convertProtoApiConfigurationToApiConfiguration(request.apiConfiguration)
			await updateApiConfiguration(controller.context, apiConfiguration)

			if (controller.task) {
				controller.task.api = buildApiHandler(apiConfiguration)
			}
		}

		// Update telemetry setting
		if (request.telemetrySetting) {
			await controller.updateTelemetrySetting(request.telemetrySetting as TelemetrySetting)
		}

		// CARET MODIFICATION: Chatbot/Agent Ïö©Ïñ¥ ÌÜµÏùº - planActSeparateModelsSetting ‚Üí ChatbotAgentSeparateModelsSetting
		if (request.ChatbotAgentSeparateModelsSetting !== undefined) {
			await controller.context.globalState.update(
				"ChatbotAgentSeparateModelsSetting",
				request.ChatbotAgentSeparateModelsSetting,
			)
		}

		// Update checkpoints setting
		if (request.enableCheckpointsSetting !== undefined) {
			await controller.context.globalState.update("enableCheckpointsSetting", request.enableCheckpointsSetting)
		}

		// Update MCP marketplace setting
		if (request.mcpMarketplaceEnabled !== undefined) {
			await controller.context.globalState.update("mcpMarketplaceEnabled", request.mcpMarketplaceEnabled)
		}

		// Update MCP responses collapsed setting
		if (request.mcpResponsesCollapsed !== undefined) {
			await controller.context.globalState.update("mcpResponsesCollapsed", request.mcpResponsesCollapsed)
		}

		// Update MCP responses collapsed setting
		if (request.mcpRichDisplayEnabled !== undefined) {
			await controller.context.globalState.update("mcpRichDisplayEnabled", request.mcpRichDisplayEnabled)
		}

		// CARET MODIFICATION: Update uiLanguage separately in globalState (app-wide setting)
		if (request.uiLanguage !== undefined) {
			await controller.context.globalState.update("uiLanguage", request.uiLanguage)
		}

		// Update chat settings
		// CARET MODIFICATION: Use workspaceState instead of globalState for chatSettings consistency
		if (request.chatSettings) {
			const chatSettings = convertProtoChatSettingsToChatSettings(request.chatSettings)
			// CARET MODIFICATION: Remove uiLanguage from chatSettings before saving (stored separately in globalState)
			const { uiLanguage, ...chatSettingsWithoutUILanguage } = chatSettings
			await controller.context.workspaceState.update("chatSettings", chatSettingsWithoutUILanguage)
			if (controller.task) {
				controller.task.chatSettings = chatSettingsWithoutUILanguage
			}
		}

		// Update terminal timeout setting
		if (request.shellIntegrationTimeout !== undefined) {
			await controller.context.globalState.update("shellIntegrationTimeout", Number(request.shellIntegrationTimeout))
		}

		// Update terminal reuse setting
		if (request.terminalReuseEnabled !== undefined) {
			await controller.context.globalState.update("terminalReuseEnabled", request.terminalReuseEnabled)
		}

		// Update terminal output line limit
		if (request.terminalOutputLineLimit !== undefined) {
			await controller.context.globalState.update("terminalOutputLineLimit", Number(request.terminalOutputLineLimit))
		}

		// CARET MODIFICATION: Conditional broadcast to prevent circular messages
		// Skip broadcast for uiLanguage-only updates to prevent webview subscription override
		const isUILanguageOnlyUpdate =
			request.uiLanguage !== undefined &&
			!request.apiConfiguration &&
			!request.telemetrySetting &&
			!request.chatSettings &&
			request.ChatbotAgentSeparateModelsSetting === undefined &&
			request.enableCheckpointsSetting === undefined &&
			request.mcpMarketplaceEnabled === undefined &&
			request.mcpResponsesCollapsed === undefined &&
			request.mcpRichDisplayEnabled === undefined &&
			request.shellIntegrationTimeout === undefined &&
			request.terminalReuseEnabled === undefined &&
			request.terminalOutputLineLimit === undefined

		console.log("[DEBUG] üîß Broadcast decision:", {
			isUILanguageOnlyUpdate,
			willBroadcast: !isUILanguageOnlyUpdate,
		})

		if (!isUILanguageOnlyUpdate) {
			console.log("[DEBUG] üîß Calling postStateToWebview()")
			// Post updated state to webview (only for non-uiLanguage updates)
			await controller.postStateToWebview()
		} else {
			console.log("[DEBUG] üîß SKIPPING postStateToWebview() for uiLanguage-only update")
		}

		return Empty.create()
	} catch (error) {
		console.error("Failed to update settings:", error)
		throw error
	}
}
