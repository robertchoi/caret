const fs = require("fs")
const path = require("path")

/**
 * ÏãúÏä§ÌÖú ÌîÑÎ°¨ÌîÑÌä∏ ÌÜ†ÌÅ∞ Ï∏°Ï†ï Ïä§ÌÅ¨Î¶ΩÌä∏
 * Í∏∞Ï°¥ generate-report.jsÏùò ÏãúÏä§ÌÖú ÌîÑÎ°¨ÌîÑÌä∏ Î∂ÑÏÑù Î°úÏßÅÏùÑ ÌôúÏö©
 */

// ÌÜ†ÌÅ∞ Ï∂îÏ†ï Ìï®Ïàò (Í∏∞Ï°¥ Ïä§ÌÅ¨Î¶ΩÌä∏ÏôÄ ÎèôÏùº)
function estimateTokens(text) {
    const wordCount = text.split(/\s+/).length
    const charCount = text.length
    
    // Îã§ÏñëÌïú ÌÜ†ÌÅ∞ Ï∂îÏ†ï Î∞©Î≤ï
    const estimates = {
        conservative: Math.ceil(wordCount * 0.75),  // Î≥¥ÏàòÏ†Å Ï∂îÏ†ï
        standard: Math.ceil(wordCount * 1.0),       // ÌëúÏ§Ä Ï∂îÏ†ï
        aggressive: Math.ceil(wordCount * 1.33),    // Ï†ÅÍ∑πÏ†Å Ï∂îÏ†ï
        charBased: Math.ceil(charCount / 4),        // Í∏ÄÏûê Í∏∞Î∞ò Ï∂îÏ†ï
    }
    
    return {
        wordCount,
        charCount,
        ...estimates,
        average: Math.ceil((estimates.conservative + estimates.standard + estimates.aggressive + estimates.charBased) / 4)
    }
}

// ÏãúÏä§ÌÖú ÌîÑÎ°¨ÌîÑÌä∏ Î∂ÑÏÑù Ìï®Ïàò (Í∏∞Ï°¥ Ïä§ÌÅ¨Î¶ΩÌä∏ Î°úÏßÅ ÌôúÏö©)
function analyzeSystemPrompt(content) {
    return {
        isCaretJson: content.includes('BASE_PROMPT_INTRO') || content.includes('COLLABORATIVE_PRINCIPLES'),
        isTrueCline: content.includes('# Cline') && content.includes('a highly skilled software engineer'),
        hasYouAreClice: content.includes('You are Cline'),
        hasCaretModification: content.includes('CARET MODIFICATION'),
        toolCount: (content.match(/^##\s+\w+/gm) || []).length,
        preview: content.substring(0, 300) + '...'
    }
}

// ÏãúÏä§ÌÖú ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ± Î∞è Ï∏°Ï†ï
async function measureSystemPrompts() {
    console.log('üîç ÏãúÏä§ÌÖú ÌîÑÎ°¨ÌîÑÌä∏ ÌÜ†ÌÅ∞ Ï∏°Ï†ï ÏãúÏûë...\n')
    
    const extensionPath = __dirname
    const mockParams = {
        cwd: process.cwd(),
        supportsBrowserUse: false,
        mcpHub: { getServers: () => [] },
        browserSettings: {},
        isClaude4ModelFamily: false
    }
    
    const results = []
    
    try {
        // 1. Cline Î™®Îìú (TRUE_CLINE_SYSTEM_PROMPT)
        console.log('üìÑ Cline Î™®Îìú (TRUE_CLINE_SYSTEM_PROMPT) Ï∏°Ï†ï Ï§ë...')
        const { TRUE_CLINE_SYSTEM_PROMPT } = require('./src/core/prompts/true-cline-system')
        const clinePrompt = await TRUE_CLINE_SYSTEM_PROMPT(
            mockParams.cwd,
            mockParams.supportsBrowserUse,
            mockParams.mcpHub,
            mockParams.browserSettings,
            mockParams.isClaude4ModelFamily,
            "act"
        )
        
        const clineAnalysis = analyzeSystemPrompt(clinePrompt)
        const clineTokens = estimateTokens(clinePrompt)
        
        results.push({
            name: 'Cline (TRUE_CLINE_SYSTEM_PROMPT)',
            mode: 'cline',
            prompt: clinePrompt,
            analysis: clineAnalysis,
            tokens: clineTokens
        })
        
        // 2. Caret Agent Î™®Îìú (JSON ÏãúÏä§ÌÖú)
        console.log('üìÑ Caret Agent Î™®Îìú (JSON ÏãúÏä§ÌÖú) Ï∏°Ï†ï Ï§ë...')
        const { SYSTEM_PROMPT } = require('./caret-src/core/prompts/system')
        const caretAgentPrompt = await SYSTEM_PROMPT(
            mockParams.cwd,
            mockParams.supportsBrowserUse,
            mockParams.mcpHub,
            mockParams.browserSettings,
            mockParams.isClaude4ModelFamily,
            extensionPath,
            "agent"
        )
        
        const caretAgentAnalysis = analyzeSystemPrompt(caretAgentPrompt)
        const caretAgentTokens = estimateTokens(caretAgentPrompt)
        
        results.push({
            name: 'Caret Agent (JSON)',
            mode: 'agent',
            prompt: caretAgentPrompt,
            analysis: caretAgentAnalysis,
            tokens: caretAgentTokens
        })
        
        // 3. Caret Chatbot Î™®Îìú (JSON ÏãúÏä§ÌÖú)
        console.log('üìÑ Caret Chatbot Î™®Îìú (JSON ÏãúÏä§ÌÖú) Ï∏°Ï†ï Ï§ë...')
        const caretChatbotPrompt = await SYSTEM_PROMPT(
            mockParams.cwd,
            mockParams.supportsBrowserUse,
            mockParams.mcpHub,
            mockParams.browserSettings,
            mockParams.isClaude4ModelFamily,
            extensionPath,
            "chatbot"
        )
        
        const caretChatbotAnalysis = analyzeSystemPrompt(caretChatbotPrompt)
        const caretChatbotTokens = estimateTokens(caretChatbotPrompt)
        
        results.push({
            name: 'Caret Chatbot (JSON)',
            mode: 'chatbot',
            prompt: caretChatbotPrompt,
            analysis: caretChatbotAnalysis,
            tokens: caretChatbotTokens
        })
        
        // 4. Í≤∞Í≥º Ï∂úÎ†•
        console.log('\nüìä ÏãúÏä§ÌÖú ÌîÑÎ°¨ÌîÑÌä∏ ÌÜ†ÌÅ∞ Ï∏°Ï†ï Í≤∞Í≥º:')
        console.log('=' .repeat(80))
        
        results.forEach((result, index) => {
            console.log(`\nüîπ ${result.name}:`)
            console.log(`   Í∏ÄÏûê Ïàò: ${result.tokens.charCount.toLocaleString()}`)
            console.log(`   Îã®Ïñ¥ Ïàò: ${result.tokens.wordCount.toLocaleString()}`)
            console.log(`   ÎèÑÍµ¨ Ïàò: ${result.analysis.toolCount}Í∞ú`)
            console.log(`   ÌÜ†ÌÅ∞ Ï∂îÏ†ï:`)
            console.log(`     - Î≥¥ÏàòÏ†Å: ${result.tokens.conservative.toLocaleString()}`)
            console.log(`     - ÌëúÏ§Ä: ${result.tokens.standard.toLocaleString()}`)
            console.log(`     - Ï†ÅÍ∑πÏ†Å: ${result.tokens.aggressive.toLocaleString()}`)
            console.log(`     - Í∏ÄÏûêÍ∏∞Î∞ò: ${result.tokens.charBased.toLocaleString()}`)
            console.log(`     - ÌèâÍ∑†: ${result.tokens.average.toLocaleString()}`)
            console.log(`   Î∂ÑÏÑù:`)
            console.log(`     - Caret JSON: ${result.analysis.isCaretJson ? '‚úÖ' : '‚ùå'}`)
            console.log(`     - True Cline: ${result.analysis.isTrueCline ? '‚úÖ' : '‚ùå'}`)
            console.log(`     - "You are Cline": ${result.analysis.hasYouAreClice ? '‚úÖ' : '‚ùå'}`)
        })
        
        // 5. Ï†àÏïΩ Ìö®Í≥º Í≥ÑÏÇ∞
        const clineResult = results[0]
        const agentResult = results[1]
        const chatbotResult = results[2]
        
        const agentSavings = ((clineResult.tokens.average - agentResult.tokens.average) / clineResult.tokens.average * 100).toFixed(1)
        const chatbotSavings = ((clineResult.tokens.average - chatbotResult.tokens.average) / clineResult.tokens.average * 100).toFixed(1)
        
        console.log(`\nüí∞ ÌÜ†ÌÅ∞ Ï†àÏïΩ Ìö®Í≥º:`)
        console.log(`   - Caret Agent vs Cline: ${agentSavings}% Ï†àÏïΩ (${(clineResult.tokens.average - agentResult.tokens.average).toLocaleString()} ÌÜ†ÌÅ∞)`)
        console.log(`   - Caret Chatbot vs Cline: ${chatbotSavings}% Ï†àÏïΩ (${(clineResult.tokens.average - chatbotResult.tokens.average).toLocaleString()} ÌÜ†ÌÅ∞)`)
        
        // 6. ÌîÑÎ°¨ÌîÑÌä∏ ÌååÏùº Ï†ÄÏû•
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0]
        results.forEach(result => {
            const filename = `system-prompt-${result.mode}-${timestamp}.txt`
            fs.writeFileSync(filename, result.prompt)
            console.log(`üìÅ Ï†ÄÏû•: ${filename}`)
        })
        
        // 7. Ï∏°Ï†ï Í≤∞Í≥º JSON Ï†ÄÏû•
        const reportData = {
            timestamp: new Date().toISOString(),
            environment: {
                extensionPath,
                cwd: mockParams.cwd,
                supportsBrowserUse: mockParams.supportsBrowserUse,
                mcpServerCount: mockParams.mcpHub.getServers().length,
            },
            results: results.map(r => ({
                name: r.name,
                mode: r.mode,
                analysis: r.analysis,
                tokens: r.tokens,
                savings: r.mode === 'cline' ? '0%' : 
                         r.mode === 'agent' ? `${agentSavings}%` : 
                         `${chatbotSavings}%`
            }))
        }
        
        const reportFilename = `system-prompt-measurement-${timestamp}.json`
        fs.writeFileSync(reportFilename, JSON.stringify(reportData, null, 2))
        console.log(`üìÑ Ï∏°Ï†ï Î≥¥Í≥†ÏÑú Ï†ÄÏû•: ${reportFilename}`)
        
    } catch (error) {
        console.error('‚ùå Ï∏°Ï†ï Ï§ë Ïò§Î•ò Î∞úÏÉù:', error)
    }
}

// Ïã§Ìñâ
measureSystemPrompts() 