import { describe, it, expect, beforeEach, vi, type MockedFunction } from 'vitest'
import type { Controller } from '../../core/controller'
import type { ChatSettings } from '../../shared/ChatSettings'

describe('Controller Chatbot/Agent 모드 처리', () => {
  let mockController: Partial<Controller>
  let mockTelemetryService: { captureModeSwitch: MockedFunction<any> }
  let mockPostMessage: MockedFunction<any>

  beforeEach(() => {
    // Mock 초기화
    mockTelemetryService = {
      captureModeSwitch: vi.fn()
    }
    mockPostMessage = vi.fn()
    mockController = {
      toggleChatbotAgentModeWithChatSettings: vi.fn(),
      getTChatBotMode: vi.fn(),
      mapToClineMode: vi.fn()
    }
  })

  it('should handle toggleChatbotAgentModeWithChatSettings for Chatbot mode', async () => {
    // TDD: Chatbot 모드 설정 요청을 올바르게 처리해야 함
    const chatbotSettings: ChatSettings = { mode: "chatbot" }
    
    // Mock 동작 정의
    mockController.getTChatBotMode = vi.fn().mockReturnValue("chatbot")
    mockController.toggleChatbotAgentModeWithChatSettings = vi.fn().mockResolvedValue(undefined)
    
    await mockController.toggleChatbotAgentModeWithChatSettings!(chatbotSettings)
    
    expect(mockController.toggleChatbotAgentModeWithChatSettings).toHaveBeenCalledWith(chatbotSettings)
  })

  it('should handle toggleChatbotAgentModeWithChatSettings for Agent mode', async () => {
    // TDD: Agent 모드 설정 요청을 올바르게 처리해야 함
    const agentSettings: ChatSettings = { mode: "agent" }
    
    // Mock 동작 정의
    mockController.getTChatBotMode = vi.fn().mockReturnValue("agent")
    mockController.toggleChatbotAgentModeWithChatSettings = vi.fn().mockResolvedValue(undefined)
    
    await mockController.toggleChatbotAgentModeWithChatSettings!(agentSettings)
    
    expect(mockController.toggleChatbotAgentModeWithChatSettings).toHaveBeenCalledWith(agentSettings)
  })

  it('should capture telemetry with Chatbot/Agent terminology', async () => {
    // TDD: 텔레메트리에 Chatbot/Agent 용어를 사용해야 함
    const chatbotSettings: ChatSettings = { mode: "chatbot" }
    const agentSettings: ChatSettings = { mode: "agent" }
    
    // 텔레메트리 캡처 확인 (실제 구현에서 검증될 부분)
    expect(chatbotSettings.mode).toBe("chatbot")
    expect(agentSettings.mode).toBe("agent")
  })

  it('should maintain Cline compatibility through mapping layer', () => {
    // TDD: Cline 호환성을 위한 매핑 레이어가 있어야 함
    mockController.mapToClineMode = vi.fn()
      .mockReturnValueOnce("plan")  // ask -> plan
      .mockReturnValueOnce("act")   // agent -> act
    
    const askMapped = mockController.mapToClineMode!("chatbot")
    const agentMapped = mockController.mapToClineMode!("agent")
    
    expect(askMapped).toBe("plan")
    expect(agentMapped).toBe("act")
  })

  it('should handle legacy Plan/Act requests by converting to Chatbot/Agent internally', () => {
    // TDD: 레거시 Plan/Act 요청을 내부적으로 Chatbot/Agent로 변환해야 함
    const legacyPlanRequest = { mode: "plan" }
    const legacyActRequest = { mode: "act" }
    
    // 내부 변환 로직 테스트 (나중에 구현될 부분)
    const expectedInternalMappings = {
      plan: "chatbot",
      act: "agent"
    }
    
    expect(expectedInternalMappings.plan).toBe("chatbot")
    expect(expectedInternalMappings.act).toBe("agent")
  })

  it('should update Task mode when controller mode changes', () => {
    // TDD: Controller 모드 변경 시 Task 모드도 업데이트되어야 함
    const mockTask = {
      setMode: vi.fn(),
      getCurrentMode: vi.fn()
    }
    
    // 모드 설정 확인
    mockTask.setMode("chatbot")
    mockTask.setMode("agent")
    
    expect(mockTask.setMode).toHaveBeenCalledWith("chatbot")
    expect(mockTask.setMode).toHaveBeenCalledWith("agent")
  })
})

describe('Controller Chatbot/Agent 메서드명 검증', () => {
  it('should use Chatbot/Agent terminology in method names', () => {
    // TDD: 메서드명이 Chatbot/Agent 용어를 사용해야 함
    const expectedMethodName = "toggleChatbotAgentModeWithChatSettings"
    const deprecatedMethodName = "togglePlanActModeWithChatSettings"
    
    expect(expectedMethodName).toContain("ChatbotAgent")
    expect(expectedMethodName).not.toContain("PlanAct")
    expect(deprecatedMethodName).toContain("PlanAct")
  })

  it('should support both ChatSettings and ChatContent parameters', () => {
    // TDD: ChatSettings와 ChatContent 모두 지원해야 함
    const chatSettings: ChatSettings = { mode: "chatbot" }
    const chatContent = { messages: [] }
    
    // 매개변수 타입 검증
    expect(typeof chatSettings.mode).toBe("string")
    expect(["chatbot", "agent"]).toContain(chatSettings.mode)
    expect(typeof chatContent).toBe("object")
  })
})

describe('Controller Cline 호환성 레이어', () => {
  it('should provide minimal Cline compatibility mapping', () => {
    // TDD: 최소한의 Cline 호환성 매핑만 제공해야 함
    const clineCompatibilityMap = {
      // Chatbot/Agent -> Plan/Act (외부 API용)
      toExternal: {
        chatbot: "plan",
        agent: "act"
      },
      // Plan/Act -> Chatbot/Agent (내부 변환용)
      fromExternal: {
        plan: "chatbot",
        act: "agent"
      }
    }
    
    expect(clineCompatibilityMap.toExternal.ask).toBe("plan")
    expect(clineCompatibilityMap.toExternal.agent).toBe("act")
    expect(clineCompatibilityMap.fromExternal.plan).toBe("chatbot")
    expect(clineCompatibilityMap.fromExternal.act).toBe("agent")
  })

  it('should limit compatibility layer to essential functions only', () => {
    // TDD: 호환성 레이어는 필수 기능만 포함해야 함
    const essentialCompatibilityFunctions = [
      "mapToClineMode",
      "mapFromClineMode"
    ]
    
    const unnecessaryCompatibilityFunctions = [
      "mapAllPlanActToChatbotAgent",
      "convertEntireSystemToLegacy",
      "enableFullPlanActSupport"
    ]
    
    essentialCompatibilityFunctions.forEach(fn => {
      expect(fn).toMatch(/^map(To|From)ClineMode$/)
    })
    
    unnecessaryCompatibilityFunctions.forEach(fn => {
      expect(fn).not.toMatch(/^map(To|From)ClineMode$/)
    })
  })
}) 